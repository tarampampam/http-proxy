name: tests

on:
  push:
    branches: [master, main]
    paths-ignore: ['**.md']
    tags-ignore: ['**']
  pull_request:
    paths-ignore: ['**.md']

jobs:
  gitleaks:
    name: Gitleaks
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
        with: {fetch-depth: 0}

      - name: Check for GitLeaks
        uses: gacts/gitleaks@v1 # Action page: <https://github.com/gacts/gitleaks>

  golangci-lint:
    name: Golang-CI (lint)
    runs-on: ubuntu-20.04
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with: {go-version: 1.19}

      - name: Run linter
        uses: golangci/golangci-lint-action@v3 # Action page: <https://github.com/golangci/golangci-lint-action>
        with:
          version: v1.48 # without patch version
          only-new-issues: false # show only new issues if it's a pull request

  go-test:
    name: Unit tests
    runs-on: ubuntu-20.04
    steps:
      - name: Set up Go
        uses: actions/setup-go@v3
        with: {go-version: 1.19}

      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2 # Fixes codecov error 'Issue detecting commit SHA'

      - name: Go modules Cache # Docs: <https://git.io/JfAKn#go---modules>
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-

      - name: Install Go dependencies
        run: go mod download

      - name: Run Unit tests
        run: go test -race -covermode=atomic -coverprofile /tmp/coverage.txt ./...

      - name: Upload Coverage report to CodeCov
        continue-on-error: true
        uses: codecov/codecov-action@v3 # https://github.com/codecov/codecov-action
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: /tmp/coverage.txt

  build:
    name: Build for ${{ matrix.os }} (${{ matrix.arch }})
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        os: [linux, windows, darwin] # linux, freebsd, darwin, windows
        arch: [amd64]                # amd64, 386
        include:
          - os: linux
            arch: 386
    needs: [golangci-lint, go-test]
    steps:
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.19

      - name: Check out code
        uses: actions/checkout@v3

      - uses: gacts/github-slug@v1
        id: slug

      - name: Go modules Cache # Docs: <https://git.io/JfAKn#go---modules>
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-

      - name: Install Go dependencies
        run: go mod download

      - name: Build application
        env:
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
          CGO_ENABLED: 0
          LDFLAGS: -s -w -X github.com/tarampampam/http-proxy-daemon/internal/pkg/version.version=${{ steps.slug.outputs.branch-name-slug }}@${{ steps.slug.outputs.commit-hash-short }}
        run: go build -trimpath -ldflags "$LDFLAGS" -o /tmp/http-proxy-daemon ./cmd/http-proxy-daemon/

      - name: Try to execute
        if: matrix.os == 'linux'
        run: /tmp/http-proxy-daemon version && /tmp/http-proxy-daemon -h

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: http-proxy-daemon-${{ matrix.os }}-${{ matrix.arch }}
          path: /tmp/http-proxy-daemon
          if-no-files-found: error
          retention-days: 1

  e2e:
    name: End-to-End tests
    runs-on: ubuntu-20.04
    needs: [build]
    steps:
      - name: Download compiled binary file
        uses: actions/download-artifact@v2
        with:
          name: http-proxy-daemon-linux-amd64
          path: .artifact

      - name: Prepare binary file to run
        working-directory: .artifact
        run: mv ./http-proxy-daemon ./../app && chmod +x ./../app

      - name: Start HTTP server
        run: ./app serve --listen 0.0.0.0 --port 8080 --prefix "foobar" &

      - name: Sleep
        run: sleep 2

      - name: Send request using application
        run: curl -v --fail http://127.0.0.1:8080/foobar/https/httpbin.org/json

  docker-image:
    name: Build docker image
    runs-on: ubuntu-20.04
    needs: [golangci-lint, go-test]
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - uses: gacts/github-slug@v1
        id: slug

      - name: Build image
        run: |
          docker build \
            -t http-proxy-daemon:local \
            --build-arg "APP_VERSION=${{ steps.slug.outputs.branch-name-slug }}@${{ steps.slug.outputs.commit-hash-short }}" \
            -f ./Dockerfile \
            .

      - name: Try to execute
        run: docker run --rm http-proxy-daemon:local version

      - name: Scan image
        uses: anchore/scan-action@v3 # action page: <https://github.com/anchore/scan-action>
        with:
          image: http-proxy-daemon:local
          fail-build: false
          severity-cutoff: low # negligible, low, medium, high or critical

      - name: Save docker image
        run: docker save http-proxy-daemon:local > ./docker-image.tar

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: docker-image
          path: ./docker-image.tar
          retention-days: 1

  docker-image-e2e:
    name: Docker image End-to-End tests
    runs-on: ubuntu-20.04
    needs: [docker-image]
    steps:
      - name: Download builded docker image
        uses: actions/download-artifact@v2
        with:
          name: docker-image
          path: .artifact

      - name: Prepare image to run
        working-directory: .artifact
        run: docker load < docker-image.tar

      - name: Run docker image with app
        run: |
          docker run --rm -d \
            -p "8081:8081/tcp" \
            -e "LISTEN_ADDR=0.0.0.0" \
            -e "LISTEN_PORT=8081" \
            -e "PROXY_PREFIX=foobar" \
            -e "PROXY_REQUEST_TIMEOUT=15s" \
              http-proxy-daemon:local

      - name: Sleep
        run: sleep 2

      - name: Send request using application
        run: curl -v --fail http://127.0.0.1:8081/foobar/https/httpbin.org/json
